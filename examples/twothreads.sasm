// ROM image assembly file

ldr &start a
jmp a

DW runpt
DW mainsp
DW mainnext
DW secsp
DW secnext

// Start - setup user interrupt handler
start:
// Start-up stack
ldc 2000 a
lsp a

// Loopback handler
ldr &loopback a
ldc 0 b     // int 0 handler address
mrm a b     // Handler = loopback

// Setup timer
ldr &timer a
ldc 4 b     // int 1 handler address
mrm a b     // Handler = timer
ldc 1 a     // enable == 1
ldc 1 b     // serial on line 1
out a b     // Enable timer

// Setup main thread stack
ldc 2048 a
ldr &main b
ldc 65 c
CALL initstack      // a <- new SP

// Fill main TCP
ldr &mainsp b
mrm a b             // mainsp = 2048 + bootstrap
ldr &secsp c
ldr &mainnext d
mrm c d             // mainnext = &secsp

// Setup second thread stack
ldc 3092 a
ldr &second b
ldc 66 c
CALL initstack      // a <- new SP

// Fill second TCP
ldr &secsp b
mrm a b             // secsp = 3092 + bootstrap
ldr &secnext g
ldr &mainsp b
mrm b g             // secnext = &mainsp

// Set running TCP
ldr &runpt h
mrm b h             // runpt = &mainsp

// Running main thread
mmr b a
lsp a
irx

// Init stack for a new thread
// a = <stack>
// b = <func>
// c = <init values>
// ret: a <- new thread stack head
FUNC initstack
ssp d               // Save start-up stack
lsp a               // Main SP = 2048
psh b               // Thread start = main
psh c               // a
psh c               // b
psh c               // c
psh c               // d
psh c               // e
psh c               // f
psh c               // g
psh c               // h
ssp a               // Updated SP
lsp d               // Restore start-up stack
ret

// Main thread
FUNC main
CALL mainloop

// Secondary thread
FUNC second
CALL mainloop

// Generic loop
FUNC mainloop
 // 'A' or 'B' symbol
int a
nop
ldr &mainloop c
jmp c

// User interrupt handler - send 'word' to serial
FUNC loopback
ldc 2 b
out a b
irx

// Timer tick handler - schedule the next thread
FUNC timer
ldr &runpt a
mmr a b         // b = *runpt

// Save stack pointer
ssp c
mrm c b         // runpt->sp = sp

ldc 4 d
add b d
mmr b e         // e = runpt->next

// Update running TCB
mrm e a

// Fetch new stack pointer
mmr e g
lsp g

// Resume that thread
irx
