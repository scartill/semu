/// - Kernel functions

// Loopback services offsets
CONST LOOPBACK_SUSPEND 0
CONST LOOPBACK_SERIAL 1
CONST LOOPBACK_CREATE_THREAD 2
CONST LOOPBACK_LOCK_MUTEX 3
CONST LOOPBACK_UNLOCK_MUTEX 4

FUNC Startup BEGIN
    CALL SetupHandlers
    
    // Start system-idle thread
    CALL threads::CreateSysThread
    
    // Return system thread stack pointer    
    ldr &threads::runpt a
    mmr a a             // a = *runpt
    PTR a sp#threads::TCB b
    mmr b a             // return runpt->sp    
    RETURN
END

// Addresses of kernel services. NB: LOOPBACK_SUSPEND is not used, because 'suspend' is not a real function
DW loopbacks*5

// Add one kernel service to service table
FUNC AddKernelService
    DW index a
    DW handler b
BEGIN
    ldr &loopbacks c
    ldc 4 d    
    mul a d a
    add c a c
    mrm b c             // loopbacks[index] = handler
    RETURN
END

// Add kernel services to loopback interrupt handler
FUNC InitKernelServiceTable
BEGIN
    CLOAD LOOPBACK_SERIAL a
    ldr &WriteSerial b
    CALL AddKernelService
    
    CLOAD LOOPBACK_CREATE_THREAD a
    ldr &threads::CreateThread b
    CALL AddKernelService

    CLOAD LOOPBACK_LOCK_MUTEX a
    ldr &sync::LockMutex b
    CALL AddKernelService
    
    CLOAD LOOPBACK_UNLOCK_MUTEX a
    ldr &sync::UnlockMutex b
    CALL AddKernelService
    RETURN
END

// Add one kernel service to service table
FUNC SetupHandler
    DW index a
    DW handler b
BEGIN
    CLOAD hw::INT_VECT_BASE c
    ldc 4 d
    mul a d a
    add c a c
    mrm b c             // memory[INT_VECT_BASE][index] = handler
    RETURN
END
    
// Setup interrupt handlers
FUNC SetupHandlers BEGIN
    // Static kernel services table
    CALL InitKernelServiceTable

    // Loopback handler
    CLOAD hw::LOOPBACK_LINE a
    ldr &HLoopback b
    CALL SetupHandler

    // Setup timer
    CLOAD hw::SYSTIMER_LINE a
    ldr &threads::HScheduler b
    CALL SetupHandler
    
    RETURN
END

// User interrupt handler - invokes kernel functions
// HLoopback([params], h := service)
FUNC HLoopback BEGIN
    ldr &callservice g
    jgt h g                 // if (service == 0) Suspend else goto callservice

  suspend:
    ldr &threads::HScheduler g       // NB: no 'cll' instruction
    jmp g                            // - saving the stack intact
    
  callservice:
    ldc 4 g
    mul h g h
    ldr &loopbacks g
    add g h g                       
    mmr g g                         // g := loopbacks[service]
    cll g
    irx
END
    
// Writes a char to serial peripheral
// HWriteSerial(symbol)
FUNC WriteSerial BEGIN
    CLOAD hw::SERIAL_MM_BASE b       // serial MM base
    mrm a b
    CLOAD hw::SERIAL_LINE c
    out c                   // signal serial
    RETURN
END

