// -- Threads and scheduler functions --

STRUCT TCB
    DW sp
    DW func
    DW param
    DW syncobj
    DW next
    DW prev
END

// Running thread pointer
DW runpt

// Init stack for a new thread
FUNC InitStack // -> new_stack
    DW stack_top a
    DW func b
    DW param c
BEGIN
    mrr a h             // Save stack top as initial FP

    mrm b a             // Thread start = <func>
    ldc 4 d
    add a d a
    
    mrm c a             // Func <param> passed in a
    
    ldc 32 e            // Leave 4*8 bytes for GPRs
    add a e a
        
    mrm h a
    add a d a           // Start thread with fp = sp
    RETURN
END

FUNC CreateThread // -> new_stack
    DW stack_top a
    DW func b
    DW param c
    DW tcb d
BEGIN
    // stack_top := stack_top
    mrr a a
    // func := TUserThread
    ldr &TUserThread b
    // param := tcb
    LLOAD tcb c
    CALL InitStack             // a <- new_stack
    
    LLOAD tcb b                // b <- tcb
    PTR b sp#TCB c
    mrm a c                    // tcb.sp = a
    LLOAD func a
    PTR b func#TCB c
    mrm a c                    // tcb.func = func
    LLOAD param a
    PTR b param#TCB c
    mrm a c                    // tcb.param = param
    ldc 0 a
    PTR b syncobj#TCB c
    mrm a c                    // tcb.syncobj = 0 (ready to run)
      
    ldr &runpt d               // d <- runpt
    mmr d d                    // d <- *runpt
    
    PTR d next#TCB h
    mmr h e                    // e <- runpt->next
    
    mrm b h                    // runpt->next = tcb
    
    PTR b next#TCB h    
    mrm e h                    // tcp.next = e
    
    PTR b prev#TCB h
    mrm d h                    // tcp.prev = *runpt
    
    PTR e prev#TCB h
    mrm b h                    // runpt->next.prev = tcb    
    
    RETURN
END

FUNC ThreadWait
    DW syncobj a
BEGIN
    ldr &runpt b
    mmr b b
    PTR b syncobj#TCB h
    mrm a h                 // runpt->syncobj = syncobj (set thread to wait)
    RETURN
END

// A wrapper around user thread function enables correct thread termination on callback's return
FUNC TUserThread
    DW tcb a
BEGIN
    LLOAD tcb b
    PTR b param#TCB c
    mmr c a    
    PTR b func#TCB h
    mmr h c
    // param := a
    // <func> := c
    cll c               // Call to real user thread function
    
    // Removing thread from schedule
    LLOAD tcb a
    PTR a prev#TCB h
    mmr h b             // b := prev
    PTR a next#TCB h
    mmr h c             // c := next
    PTR b next#TCB h
    mrm c h             // prev.next = next
    PTR c prev#TCB h
    mrm b h             // next.prev = prev
    CALL api::Suspend
    // This function never returns
END

// - Scheduling

// Timer tick handler - schedule the next thread
FUNC HScheduler BEGIN
    ldr &runpt a
    mmr a a             // a = *runpt
    
    // Save stack pointer
    PTR a sp#TCB b
    ssp c
    mrm c b         // runpt->sp = sp

    PTR a next#TCB b
    mmr b a         // a = runpt->next

    // Fetch new stack pointer    
    PTR a sp#TCB b
    mmr b c
    lsp c
    
    // Update running TCB
    ldr &runpt b
    mrm a b

    // Resume that thread
    irx    
END

// - System-idle thread

// System idle thread
DW idlestack*100
DS TCB idletcb

// Create a thread that never stops
FUNC CreateSysThread BEGIN
    ldr &idlestack a
    ldr &TSysThread b
    ldc 0 c                      // No parameters
    CALL threads::InitStack      // a <- SP
    
    ldr &idletcb b
    PTR b sp#TCB h      // idletcb.sp = a
    mrm a h
    PTR b next#TCB h    // idletcb.next = &idletcb
    mrm b h
    PTR b prev#TCB h    // idletcb.prev = &idletcb
    mrm b h
    ldr &runpt h        // runpt = &idletcb
    mrm b h
    RETURN
END

DT message "Kernel thread started"

// System idle thread
// NB: On the contrary to other kernel functions executes with interrupts open
FUNC TSysThread BEGIN
    // Ready the be scheduled, starting system timer
    CLOAD hw::SYSTIMER_LINE a
    out a         // Enable timer
    
    ldr &message a
    CALL api::Print
    CALL api::PrintLn
    
    // Let application start user threads
    CALL app::Start
    // Start idle loop
  loop:
    nop
    CALL api::Suspend
    ldr &loop c
    jmp c
END
